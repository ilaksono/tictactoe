var z = -1;
var y = -1;
var x = -1;
var winningSquares = [];

function Square(props){
    return (
      <button 
        className={(props.isWinning ? 'square-winning' : 'square') }  
        onClick = {props.onClick}
        >
        {props.value}
      </button>
    );
}
class Board extends React.Component {
  renderSquare(i) {
    return (<Square key = {"square" + i}
             value = {this.props.squares[i] } 
             onClick = {() => this.props.onClick(i)}
              isWinning = {winningSquares.includes(i)}
             />
            );  
  }
  renderRow(k){
    let squares = [];
    for(let l = 0;l<3;l++){
      squares.push(this.renderSquare(3*k+l));
    }
    return squares; 
  }
  renderBoard(j){
   return (
         <div className = "board-row">{this.renderRow(j)}</div>
   );  
  }
  render() {
    return (
      <div>
        {this.renderBoard(0)}
        {this.renderBoard(1)}
        {this.renderBoard(2)}
      </div> 
    );
  }
}
class Game extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      history: [{
        squares: Array(9).fill(null),   
      }],
      stepNumber: 0,
      xIsNext: true,
      loc: Array(9).fill(null),
      player:['X','O','X','O','X','O','X','O','X'],
      toggle:1,
      btnDesc: '<h1> Toggle Order</h1>',
    };
  }
  handleClick(i) {
      const history = (this.state.history.slice(0, this.state.stepNumber + 1));
      const current = history[history.length-1]
      const squares = current.squares.slice();
      const loc = (this.state.loc.slice(0, this.state.stepNumber + 1));
      const player = (this.state.player.slice(0, this.state.stepNumber+1));
      
      if (calculateWinner(squares) || squares[i]) {
        return;
      }
      squares[i] = this.state.xIsNext ? 'X' : 'O';

      this.setState({
        history: history.concat([{
          squares: squares,          
        }]),
        stepNumber: history.length,
        xIsNext: !this.state.xIsNext,
        loc: loc.concat(i),
                    });
    }
  jumpTo(step){
    this.setState({
      stepNumber: step,
      xIsNext: (step%2) === 0,
    });
  }
  
toggleButton(){
  const toggle = this.state.toggle;
    if(toggle == 0){
      this.setState({
      toggle: 1,
      });
    }
    else{
      this.setState({
        toggle: 0,
      });
    }
    
  }
  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    const loc = this.state.loc;
    const player = this.state.player;
    
    const moves = history.map((step,move) => {
      const colVal = (loc,move) => {loc[move] % 3; if (loc[move]%3 == 0){loc[move]==3; return loc[move];}}
      const rowVal = (loc,move) => {loc[move]/3 + 1};
      const desc = move ?
            'Go to move # ' + move : 'Go to game start';
      const desc2 = move ? 
          '' + player[move-1] +'('+(loc[move]%3+1)+','+(parseInt(loc[move]/3+1))+')' : '';
      const toggle = this.state.toggle;
      return(
        <li key = {move}>
          <button onClick={() => this.jumpTo(move)}> {move == this.state.stepNumber ? <b>{desc}</b> : desc} </button>
          <span> {move == this.state.stepNumber ? <b> {desc2}</b> : desc2} </span>
        </li>       
      );
    });   
    
    let status;
    
    
    if(winner) {
      status = 'winner: ' + winner.winningPlayer ;
    } else{
      status = 'Next player: ' + (this.state.xIsNext ? 'X': 'O');
    }   
    return (
      
      <div className="game">
        
        <div className="game-board">
          <Board
            winningSquares = { winner ? winner.line : [] }
            squares = {current.squares}
            onClick = {(i) => this.handleClick(i)}
            
            />
          
        </div>
        <div className="game-info">
          <div>{status} {}</div>
          <button onClick = {() => this.toggleButton()}>Sort By: {!this.state.toggle ? 'Descending' : 'Ascending'} </button>
          
          <ol>{this.state.toggle ? moves : moves.reverse()} {(this.state.stepNumber == 9 && !winner ? 'It is a draw' : '')}</ol>       
        </div>
      </div>
    );
  }
  
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);

function calculateWinner(squares) {
  
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    win = i;
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      x = a;
      y = b;
      z = c;
      winningSquares[0] = a;
      winningSquares[1] = b;
      winningSquares[2] = c;
      return { winningPlayer: squares[a], line:[a,b,c] };
    }
  } 
  win = -1;
  return null;
}
